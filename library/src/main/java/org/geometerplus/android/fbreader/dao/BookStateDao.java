package org.geometerplus.android.fbreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.geometerplus.zlibrary.text.view.ZLTextFixedPosition;

import java.util.Date;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "reader_highlights".
 */
public class BookStateDao extends AbstractDao<BookState, Long> {

  public static final String TABLENAME = "book_state";

  /**
   * Properties of entity ReaderHighlight.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property BookCode = new Property(0, Integer.class, "bookCode", true,
        "book_code");
    public final static Property Paragraph = new Property(1, Integer.class, "paragraph", false,
        "paragraph");
    public final static Property Word = new Property(2, Integer.class, "word", false, "word");
    public final static Property Character = new Property(3, Integer.class, "character", false,
        "char");
    public final static Property Time = new Property(4, Date.class, "time", false,
        "time");
  }

  private BooksDaoSession daoSession;

  public BookStateDao(DaoConfig config) {
    super(config);
  }

  public BookStateDao(DaoConfig config, BooksDaoSession daoSession) {
    super(config, daoSession);
    this.daoSession = daoSession;
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"" + TABLENAME + "\" (" + //
        "\"book_code\" INTEGER PRIMARY KEY, " +                           // 0: bookCode
        "\"paragraph\" INTEGER NOT NULL, " +                              // 1: paragraph
        "\"word\" INTEGER NOT NULL, " +                                   // 2: word
        "\"char\" INTEGER NOT NULL, " +                                   // 3: char
        "\"time\" INTEGER);");                                            // 4: time
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"" + TABLENAME + "\"";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override
  protected void bindValues(SQLiteStatement stmt, BookState entity) {
    stmt.clearBindings();

    stmt.bindLong(1, entity.bookCode);

    if (entity.position != null) {
      stmt.bindLong(2, entity.position.getParagraphIndex());
      stmt.bindLong(3, entity.position.getElementIndex());
      stmt.bindLong(4, entity.position.getCharIndex());
    }
    if (entity.time != null) {
      stmt.bindLong(5, entity.time.getTime());
    }
  }

  @Override
  protected void attachEntity(BookState entity) {
    super.attachEntity(entity);
    entity.__setDaoSession(daoSession);
  }

  /** @inheritdoc */
  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /** @inheritdoc */
  @Override
  public BookState readEntity(Cursor cursor, int offset) {
    return new BookState( //
        cursor.isNull(offset) ? null : cursor.getLong(offset),                   // bookCode
        cursor.getInt(offset + 1),                                               // paragraph
        cursor.getInt(offset + 2),                                               // word
        cursor.getInt(offset + 3),                                               // character
        cursor.isNull(offset + 4) ? null : new Date(cursor.getLong(offset + 4))  // creationTime
    );
  }

  /** @inheritdoc */
  @Override
  public void readEntity(Cursor cursor, BookState entity, int offset) {
    entity.bookCode = cursor.isNull(offset) ? null : cursor.getLong(offset);
    int paragraph = cursor.getInt(offset + 1);
    int word = cursor.getInt(offset + 2);
    int character = cursor.getInt(offset + 3);
    entity.position = new ZLTextFixedPosition(paragraph, word, character);
    entity.time = cursor.isNull(offset + 4) ? null : new Date(cursor.getLong(offset + 4));
  }

  /** @inheritdoc */
  @Override
  protected Long updateKeyAfterInsert(BookState entity, long rowId) {
    entity.bookCode = rowId;
    return rowId;
  }

  /** @inheritdoc */
  @Override
  public Long getKey(BookState entity) {
    if (entity != null) {
      return entity.bookCode;
    } else {
      return null;
    }
  }

  /** @inheritdoc */
  @Override
  protected boolean isEntityUpdateable() {
    return true;
  }
}
