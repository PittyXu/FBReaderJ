package org.geometerplus.android.fbreader.dao;


import org.geometerplus.zlibrary.text.view.ZLTextFixedPosition;
import org.geometerplus.zlibrary.text.view.ZLTextPosition;

import java.util.Date;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "reader_highlight".
 */
public class BookState {

  /**
   * 书籍唯一Code
   */
  public Long bookCode;
  public ZLTextPosition position;
  public Date time;

  /** Used to resolve relations */
  private transient BooksDaoSession daoSession;

  /** Used for active entity operations. */
  private transient BookStateDao myDao;

  // KEEP FIELDS - put your custom fields here
  // KEEP FIELDS END

  public BookState() {
  }

  public BookState(Long id) {
    bookCode = id;
  }

  public BookState(Long pBookCode, int pParagraph, int pWord, int pCharacter, Date pTime) {
    bookCode = pBookCode;
    position = new ZLTextFixedPosition(pParagraph, pWord, pCharacter);
    time = pTime;
  }

  public BookState(long pBookCode, ZLTextPosition pPosition, Date pTime) {
    bookCode = pBookCode;
    position = new ZLTextFixedPosition(pPosition);
    time = pTime;
  }

  /** called by internal mechanisms, do not call yourself. */
  public void __setDaoSession(BooksDaoSession daoSession) {
    this.daoSession = daoSession;
    myDao = daoSession != null ? daoSession.getBookStateDao() : null;
  }

  /**
   * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity
   * context.
   */
  public void delete() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.delete(this);
  }

  /**
   * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity
   * context.
   */
  public void update() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.update(this);
  }

  /**
   * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity
   * context.
   */
  public void refresh() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.refresh(this);
  }

  // KEEP METHODS - put your custom methods here

  // KEEP METHODS END
}
