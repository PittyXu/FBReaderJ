package org.geometerplus.android.fbreader.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class BooksDaoMaster extends AbstractDaoMaster {

  public static final String DB_NAME = "books.db";
  public static final int SCHEMA_VERSION = 1;

  /** Creates underlying database table using DAOs. */
  public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
    BookmarksDao.createTable(db, ifNotExists);
    BookStateDao.createTable(db, ifNotExists);
  }

  /** Drops underlying database table using DAOs. */
  public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
    BookmarksDao.dropTable(db, ifExists);
    BookStateDao.dropTable(db, ifExists);
  }

  public static abstract class OpenHelper extends SQLiteOpenHelper {

    public OpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory, SCHEMA_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
      Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
      createAllTables(db, false);
    }
  }

  /** WARNING: Drops all table on Upgrade! Use only during development. */
  public static class DevOpenHelper extends OpenHelper {

    public DevOpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion
          + " by dropping all tables");
      dropAllTables(db, true);
      onCreate(db);
    }
  }

  public BooksDaoMaster(SQLiteDatabase db) {
    super(db, SCHEMA_VERSION);
    registerDaoClass(BookmarksDao.class);
    registerDaoClass(BookStateDao.class);
  }

  public BooksDaoSession newSession() {
    return new BooksDaoSession(db, IdentityScopeType.Session, daoConfigMap);
  }

  public BooksDaoSession newSession(IdentityScopeType type) {
    return new BooksDaoSession(db, type, daoConfigMap);
  }

  public static SQLiteOpenHelper getHelper(Context context) {
    return new DevOpenHelper(context.getApplicationContext(), DB_NAME, null);
  }
}
